- name: Cumulus configure
  shell: |
    cat >> /etc/network/interfaces << EOF
    auto swp{{ item.key }}
    iface swp{{ item.key }}
        address {{ item.value['address'] }}/{{ item.value['cidr'] | ipaddr('prefix') }}
        broadcast {{ item.value['cidr'] | ipaddr('broadcast') }}
    EOF
    ifreload -a
  with_dict: "{{ iPAddressDict }}"
  when: iPAddressDict is defined
  become: yes
- name: Nat VNFD
  shell: |
    cat >> /etc/cumulus/switchd.conf << EOF
    nat.dynamic_enable = TRUE
    nat.static_enable = TRUE
    EOF
  become: yes
  when: Nat_rules is defined

- name: Restart service switchd
  systemd:
    state: restarted
    daemon_reload: yes
    name: switchd
  become: yes
  when: Nat_rules is defined

- name: Nat VNFD
  shell: |
    net add nat {{ item.typeNat }} {{ item.routingType }} {{ item.protocol }} {{ item.sourceAddrPr | ipaddr('address') }} translate {{ item.destAddrPr | ipaddr('address') }}
    ifconfig eth0:{{ item.sourceAddrPr.split('.')[3] }} {{ item.sourceAddrPr }} netmask {{ item.sourceAddrPr | ipaddr('netmask') }}
  with_items: "{{ Nat_rules }}"
  when: Nat_rules is defined  and item.routingType == "dnat"
  become: yes
  
- name: Nat VNFD
  shell: |
    net add nat {{ item.typeNat }} {{ item.routingType }} {{ item.protocol }} {{ item.sourceAddrPr | ipaddr('address') }} translate {{ item.destAddrPr | ipaddr('address') }}
    ifconfig eth0:{{ item.destAddrPr.split('.')[3] }} {{ item.destAddrPr }} netmask {{ item.destAddrPr | ipaddr('netmask') }}
  with_items: "{{ Nat_rules }}"
  when: Nat_rules is defined and item.routingType == "snat"
  become: yes
  
- name: Nat VNFD
  shell: |
    net commit
  become: yes
  when: Nat_rules is defined

- name: Tshark VNFD
  shell: |
    cat > /usr/bin/myshark << EOF
    #!/bin/bash
    tshark -b duration:{{ Tshark_analyze_duration }} -b files:{{ Tshark_analyze_files }} -f "{{ Tshark_analyze_captureFilter }}" -w {{ Tshark_analyze_pathToPcap }} -i {{ Tshark_analyze_interfaceName }}
    EOF
  become: yes
  when: Tshark_analyze_captureFilter is defined
    
- name: Restart service tshark
  systemd:
    state: restarted
    daemon_reload: yes
    name: tshark
  become: yes
  when: Tshark_analyze_captureFilter is defined


- name: Firewall VNFD
  shell: |
    iptables -A {{ item.routingPath }} -p {{ item.protocol }} -j {{ item.action }} -s {{ item.sourceAddr }} -d {{ item.destAddr }} --sport {{ item.sourcePort }} --dport {{ item.destPort }}
  with_items: "{{ Firewall_standard_rules }}"
  when: Firewall_standard_rules is defined and (item.protocol == "udp" or item.protocol == "tcp") and item.sourceAddr is defined and item.destAddr is defined
  become: yes

- name: Firewall VNFD
  shell: |
    iptables -A {{ item.routingPath }} -p {{ item.protocol }} -j {{ item.action }} -d {{ item.destAddr }} --sport {{ item.sourcePort }} --dport {{ item.destPort }}
  with_items: "{{ Firewall_standard_rules }}"
  when: Firewall_standard_rules is defined and (item.protocol == "udp" or item.protocol == "tcp") and item.sourceAddr is not defined and item.destAddr is defined
  become: yes

- name: Firewall VNFD
  shell: |
    iptables -A {{ item.routingPath }} -p {{ item.protocol }} -j {{ item.action }} -s {{ item.sourceAddr }} --sport {{ item.sourcePort }} --dport {{ item.destPort }}
  with_items: "{{ Firewall_standard_rules }}"
  when: Firewall_standard_rules is defined and (item.protocol == "udp" or item.protocol == "tcp") and item.sourceAddr is defined and item.destAddr is not defined
  become: yes

- name: Firewall VNFD
  shell: |
    iptables -A {{ item.routingPath }} -p {{ item.protocol }} -j {{ item.action }} -s {{ item.sourceAddr }} -d {{ item.destAddr }} --sport {{ item.sourcePort }} --dport {{ item.destPort }}
  with_items: "{{ Firewall_standard_rules }}"
  when: Firewall_standard_rules is defined and (item.protocol == "udp" or item.protocol == "tcp") and item.sourceAddr is not defined and item.destAddr is not defined
  become: yes

- name: Firewall VNFD
  shell: |
    iptables -A {{ item.routingPath }} -p {{ item.protocol }} -j {{ item.action }} -s {{ item.sourceAddr }} -d {{ item.destAddr }}
  with_items: "{{ Firewall_standard_rules }}"
  when: Firewall_standard_rules is defined and (item.protocol != "udp" and item.protocol != "tcp") and item.sourceAddr is defined and item.destAddr is defined
  become: yes

- name: Firewall VNFD
  shell: |
    iptables -A {{ item.routingPath }} -p {{ item.protocol }} -j {{ item.action }} -d {{ item.destAddr }}
  with_items: "{{ Firewall_standard_rules }}"
  when: Firewall_standard_rules is defined and (item.protocol != "udp" and item.protocol != "tcp") and item.sourceAddr is not defined and item.destAddr is defined
  become: yes

- name: Firewall VNFD
  shell: |
    iptables -A {{ item.routingPath }} -p {{ item.protocol }} -j {{ item.action }} -s {{ item.sourceAddr }}
  with_items: "{{ Firewall_standard_rules }}"
  when: Firewall_standard_rules is defined and (item.protocol != "udp" and item.protocol != "tcp") and item.sourceAddr is defined and item.destAddr is not defined
  become: yes

- name: Firewall VNFD
  shell: |
    iptables -A {{ item.routingPath }} -p {{ item.protocol }} -j {{ item.action }}
  with_items: "{{ Firewall_standard_rules }}"
  when: Firewall_standard_rules is defined and (item.protocol != "udp" and item.protocol != "tcp") and item.sourceAddr is not defined and item.destAddr is not defined
  become: yes

- name: DPI VNFD
  shell: |
    iptables -A {{ item.routingPath }} -m ndpi --{{ item.deepProtocol }} -j {{ item.action }} -s {{ item.sourceAddr }} -d {{ item.destAddr }}
  with_items: "{{ Firewall_dpi_rules }}"
  when: Firewall_dpi_rules is defined and item.sourceAddr is defined and item.destAddr is defined
  become: yes

- name: DPI VNFD
  shell: |
    iptables -A {{ item.routingPath }} -m ndpi --{{ item.deepProtocol }} -j {{ item.action }} -d {{ item.destAddr }}
  with_items: "{{ Firewall_dpi_rules }}"
  when: Firewall_dpi_rules is defined and item.sourceAddr is not defined and item.destAddr is defined
  become: yes

- name: DPI VNFD
  shell: |
    iptables -A {{ item.routingPath }} -m ndpi --{{ item.deepProtocol }} -j {{ item.action }} -s {{ item.sourceAddr }}
  with_items: "{{ Firewall_dpi_rules }}"
  when: Firewall_dpi_rules is defined and item.sourceAddr is defined and item.destAddr is not defined
  become: yes

- name: DPI VNFD
  shell: |
    iptables -A {{ item.routingPath }} -m ndpi --{{ item.deepProtocol }} -j {{ item.action }}
  with_items: "{{ Firewall_dpi_rules }}"
  when: Firewall_dpi_rules is defined and item.sourceAddr is not defined and item.destAddr is not defined
  become: yes


- name: Routing VNFD
  shell: |
    ip rule add from {{ item.sourceAddr }} to {{ item.destAddr }} table 10
  with_items: "{{ Routing_rules }}"
  when: Routing_rules is defined and item.sourceAddr is defined and item.destAddr is defined
  become: yes

- name: Routing VNFD
  shell: |
    ip rule add to {{ item.destAddr }} table 10
  with_items: "{{ Routing_rules }}"
  when: Routing_rules is defined and item.sourceAddr is not defined and item.destAddr is defined
  become: yes
  
- name: Routing VNFD
  shell: |
    ip rule add from {{ item.sourceAddr }} table 10
  with_items: "{{ Routing_rules }}"
  when: Routing_rules is defined and item.sourceAddr is defined and item.destAddr is not defined
  become: yes
  
- name: Routing VNFD
  shell: |
    ip route add {{ item.destCidr }} via {{ item.gateway }} dev {{ item.dev }} src {{ item.src }} table 10
  with_items: "{{ Routing_routes }}"
  when: Routing_routes is defined and item.src is defined
  become: yes
  
- name: Routing VNFD
  shell: |
    ip route add {{ item.destCidr }} via {{ item.gateway }} dev {{ item.dev }} table 10
  with_items: "{{ Routing_routes }}"
  when: Routing_routes is defined and item.src is not defined
  become: yes


- name: DHCP VNFD
  shell: |
    cat > /etc/default/isc-dhcp-server << EOF
    DHCPD_CONF="-cf /etc/dhcp/dhcpd.conf"
    DHCPD_PID="-pf /etc/dhcp/dhcpd.pid"
    INTERFACES="{{ DHCP_interfaceName }}"
    EOF
    cat > /etc/dhcp/dhcpd.conf << EOF
    default-lease-time {{ DHCP_defaultLeaseTime }};
    max-lease-time {{ DHCP_maxLeaseTime }};
    ddns-update-style none;
    authoritative;
    subnet {{ DHCP_internalNetCidr | ipaddr('network') }} netmask {{ DHCP_internalNetCidr | ipaddr('netmask') }} {
        option routers {{ DHCP_gateway }};
        option broadcast-address {{ DHCP_internalNetCidr |  ipaddr('broadcast') }};
        range {{ DHCP_rangeStart }} {{ DHCP_rangeEnd }};
    }
    EOF
  become: yes
  when: DHCP_internalNetCidr is defined

- os_port_facts:
    filters:
      name: "{{ item.value }}"
  register: result
  delegate_to: localhost
  with_dict: "{{ DHCP_staticHosts }}"
  when: DHCP_staticHosts is defined
  become: yes

- name: DHCP VNFD
  shell: |
    cat >> /etc/dhcp/dhcpd.conf << EOF
    host {{ item.ansible_facts.openstack_ports[0].name }} {
        hardware ethernet {{ item.ansible_facts.openstack_ports[0].mac_address }};
        fixed-address {{ item.ansible_facts.openstack_ports[0].fixed_ips[0].ip_address }};
    }
    EOF
  with_items: "{{ result.results }}"
  when: DHCP_internalNetCidr is defined
  become: yes

- name: Restart service dhcpd
  systemd:
    state: restarted
    daemon_reload: yes
    name: dhcpd
  when: DHCP_internalNetCidr is defined
  become: yes


- name: DNS VNFD
  shell: |
    cat > /etc/default/bind9 << EOF
    RESOLVCONF=no
    OPTIONS="-u bind -{{ DNS_iPAddressType[3] }}"
    EOF
  become: yes
  when: DNS_domainName is defined

- name: Restart service bind9
  systemd:
    state: restarted
    daemon_reload: yes
    name: bind9
  become: yes
  when: DNS_domainName is defined

- name: DNS VNFD
  shell: |
    cat > /etc/bind/named.conf.options << EOF
    acl "trusted" {
        {{ DNS_internalNetAddr }};
    EOF
  become: yes
  when: DNS_domainName is defined
        
- name: DNS VNFD
  shell: |
    cat >> /etc/bind/named.conf.options << EOF
        {{ item.value }};
    EOF
  with_dict: "{{ DNS_staticHosts }}"
  when: DNS_staticHosts is defined
  become: yes

- name: DNS VNFD
  shell: |
    cat >> /etc/bind/named.conf.options << EOF
    };
    options {
        directory "/var/cache/bind";
        recursion yes;
        allow-recursion { trusted; };
        listen-on { {{ DNS_internalNetAddr }}; };
        allow-transfer { none; };
        forwarders {
    EOF
  become: yes
  when: DNS_domainName is defined
    
- name: DNS VNFD
  shell: |
    cat >> /etc/bind/named.conf.options << EOF
            {{ item.value }};
    EOF
  with_dict: "{{ DNS_forwarders }}"
  when: DNS_forwarders is defined
  become: yes
  
- name: DNS VNFD
  shell: |
    cat >> /etc/bind/named.conf.options << EOF
        };
        dnssec-validation auto;
    };
    EOF
  become: yes
  when: DNS_domainName is defined

- name: DNS VNFD
  shell: |    
    cat >> /etc/bind/named.conf.local << EOF
    zone "{{ DNS_domainName }}" {
      type master;
      file "/etc/bind/zones/db.{{ DNS_domainName }}";
    };
    zone "{{ '.'.join(DNS_internalNetAddr.split('.')[:3][::-1]) }}.in-addr.arpa" {
      type master;
      file "/etc/bind/zones/db.{{ '.'.join(DNS_internalNetAddr.split('.')[:3][::-1]) }}";
    };
    EOF
  become: yes
  when: DNS_domainName is defined
    
- name: DNS VNFD
  shell: | 
    mkdir /etc/bind/zones
    cat > /etc/bind/zones/db.{{ DNS_domainName }} << EOF
    ;
    ; BIND data file for local loopback interface
    ;
    \$TTL 604800
    @ IN SOA cumulus.{{ DNS_domainName }}. admin.{{ DNS_domainName }}. (
      3 ; Serial
      604800 ; Refresh
      86400 ; Retry
      2419200 ; Expire
      604800 ) ; Negative Cache TTL
    ;
    @ IN NS cumulus.{{ DNS_domainName }}.
    cumulus.{{ DNS_domainName }}. IN A {{ DNS_internalNetAddr }}
    EOF
  become: yes
  when: DNS_domainName is defined
    
- name: DNS VNFD
  shell: | 
    mkdir /etc/bind/zones
    cat >> /etc/bind/zones/db.{{ DNS_domainName }} << EOF
    {{ item.key }}.{{ DNS_domainName }}. IN A {{ item.value }}
    EOF
  with_dict: "{{ DNS_staticHosts }}"
  when: DNS_staticHosts is defined
  become: yes
  
- name: DNS VNFD
  shell: | 
    cat > /etc/bind/zones/db.{{ '.'.join(DNS_internalNetAddr.split('.')[:3][::-1]) }} << EOF
    ;
    ; BIND reverse data file for local loopback interface
    ;
    \$TTL 604800
    @ IN SOA cumulus.{{ DNS_domainName }}. admin.{{ DNS_domainName }}. (
      3 ; Serial
      604800 ; Refresh
      86400 ; Retry
      2419200 ; Expire
      604800 ) ; Negative
    ; name servers
    @ IN NS cumulus.{{ DNS_domainName }}.
    ; PTR Records
    {{ DNS_internalNetAddr.split('.')[3] }} IN PTR cumulus.{{ DNS_domainName }}.
    EOF
  become: yes
  when: DNS_domainName is defined
    
- name: DNS VNFD
  shell: | 
    cat >> /etc/bind/zones/db.{{ '.'.join(DNS_internalNetAddr.split('.')[:3][::-1]) }} << EOF
    {{ item.value.split('.')[3] }} IN PTR {{ item.key }}.{{ DNS_domainName }}.
    EOF
  with_dict: "{{ DNS_staticHosts }}"
  when: DNS_staticHosts is defined
  become: yes

- name: DNS VNFD
  shell: | 
    named-checkconf
    named-checkzone {{ DNS_domainName }} /etc/bind/zones/db.{{ DNS_domainName }}
    named-checkzone {{ '.'.join(DNS_internalNetAddr.split('.')[:3][::-1]) }}.in-addr.arpa /etc/bind/zones/db.{{ '.'.join(DNS_internalNetAddr.split('.')[:3][::-1]) }}
  become: yes
  when: DNS_domainName is defined
  
- name: Restart service bind9
  systemd:
    state: restarted
    daemon_reload: yes
    name: bind9
  become: yes
  when: DNS_domainName is defined



- name: Ntop VNFD
  shell: |
    cat > /run/ntopng.conf << EOF
    -d=/var/lib/ntopng
    EOF
  become: yes
  when: Ntop_analyze_endpointPort is defined
    
- name: Ntop VNFD
  shell: |
    cat >> /run/ntopng.conf << EOF
    -w={{ Ntop_analyze_endpointPort }}
    EOF
  when: Ntop_analyze_endpointPort is defined
  become: yes
  
- name: Ntop VNFD
  shell: |
    cat >> /run/ntopng.conf << EOF
    -m={{ item }}
    EOF
  with_items: "{{ Ntop_analyze_internalNetCidr }}"
  when: Ntop_analyze_internalNetCidr is defined
  become: yes
  
- name: Ntop VNFD
  shell: |
    cat >> /run/ntopng.conf << EOF
    -i={{ item }}
    EOF
  with_items: "{{ Ntop_analyze_interfacesNames }}"
  when: Ntop_analyze_interfacesNames is defined
  become: yes

- name: Restart service ntopng
  systemd:
    state: restarted
    daemon_reload: yes
    name: ntopng
  become: yes
  when: Ntop_analyze_endpointPort is defined


